import { n8nFetch } from '../../lib/n8n';
function VodokanalDatabaseNew() { const [tables, setTables] = React.useState([]); const [tableData, setTableData] = React.useState([]); const [selectedTable, setSelectedTable] = React.useState(null); const [error, setError] = React.useState(null); const [loading, setLoading] = React.useState(false); const [currentPage, setCurrentPage] = React.useState(1); const [hasMoreData, setHasMoreData] = React.useState(true); const fetchTablesList = async () => { try { setLoading(true); setError(null); const response = await n8nFetch('getTables'); const responseData = await response.json(); if (responseData && responseData.data && Array.isArray(responseData.data)) { setTables(responseData.data); console.log('Получены данные таблиц:', responseData.data); } else { console.log('Нет данных таблиц в ответе:', responseData); setTables([]); } } catch (err) { console.error('Ошибка при загрузке списка таблиц:', err); setError(err.message || 'Произошла ошибка при загрузке списка таблиц'); } finally { setLoading(false); } }; const fetchTableData = async (tableName, page = 1, append = false) => { try { setLoading(true); setError(null); const response = await n8nFetch(`getTableData?table=${tableName}&page=${page}`); const responseData = await response.json(); if (responseData) { let newData = []; if (responseData.data && Array.isArray(responseData.data)) { newData = responseData.data; console.log(`Получены данные таблицы ${tableName} (стр.${page}):`, responseData.data); } else if (Array.isArray(responseData)) { newData = responseData; console.log(`Получены данные таблицы ${tableName} (стр.${page}):`, responseData); } else { console.log(`Нет данных таблицы ${tableName} в ответе:`, responseData); newData = []; } if (newData.length === 0 || newData.length < 10) { setHasMoreData(false); } else { setHasMoreData(true); } if (append && newData.length > 0) { setTableData(prevData => [...prevData, ...newData]); } else { setTableData(newData); setCurrentPage(1); } } else { console.log(`Пустой ответ для таблицы ${tableName}`); setTableData([]); } } catch (err) { console.error(`Ошибка при загрузке данных таблицы ${tableName}:`, err); setError(err.message || `Произошла ошибка при загрузке данных таблицы ${tableName}`); } finally { setLoading(false); } }; React.useEffect(() => { fetchTablesList(); }, []); const handleViewTable = async (tableName) => { console.log(`Просмотр таблицы: ${tableName}`); setSelectedTable(tableName); await fetchTableData(tableName); }; const handleBackToList = () => { setSelectedTable(null); setTableData([]); setCurrentPage(1); setHasMoreData(true); }; const handleLoadMore = async () => { if (selectedTable && !loading && hasMoreData) { const nextPage = currentPage + 1; setCurrentPage(nextPage); await fetchTableData(selectedTable, nextPage, true); } }; if (error) { return React.createElement('div', { style: { padding: '20px' } }, React.createElement('h1', { style: { fontSize: '24px', fontWeight: 600, color: '#333', marginBottom: '20px' } }, 'База данных водоканала'), React.createElement('div', { style: { padding: '20px', backgroundColor: '#fff1f0', borderRadius: '8px', border: '1px solid #ffccc7' } }, React.createElement('h2', { style: { color: '#cf1322', fontSize: '18px', fontWeight: 600, marginTop: 0, marginBottom: '10px' } }, 'Ошибка загрузки данных'), React.createElement('p', { style: { color: '#333', fontSize: '16px', lineHeight: '1.5', margin: 0 } }, error) ) ); } return VodokanalDatabaseNewContent({ tables, tableData, selectedTable, onViewTable: handleViewTable, onBackToList: handleBackToList, onLoadMore: handleLoadMore, hasMoreData, isLoading: loading });
}
function VodokanalDatabaseNewContent({ tables, tableData, selectedTable, onViewTable, onBackToList, onLoadMore, hasMoreData, isLoading }) { const styles = { container: { padding: '20px' }, header: { display: 'flex', alignItems: 'center', marginBottom: '20px' }, title: { fontSize: '24px', fontWeight: 600, color: '#333', margin: 0 }, subtitle: { fontSize: '16px', color: '#666', marginTop: '8px', marginBottom: '20px' }, tableContainer: { backgroundColor: '#fff', borderRadius: '8px', border: '1px solid #e0e0e0', overflow: 'hidden' }, table: { width: '100%', borderCollapse: 'collapse' }, tableHeader: { backgroundColor: '#f5f5f5', borderBottom: '1px solid #e0e0e0' }, tableHeaderCell: { padding: '10px 12px', textAlign: 'left', fontSize: '13px', fontWeight: 600, color: '#333' }, tableRow: { borderBottom: '1px solid #e0e0e0' }, tableRowAlternate: { backgroundColor: '#f9f9f9', borderBottom: '1px solid #e0e0e0' }, tableCell: { padding: '8px 12px', fontSize: '13px', color: '#333' }, buttonContainer: { display: 'flex', justifyContent: 'flex-end', padding: '12px 16px' }, iconText: { display: 'flex', alignItems: 'center', gap: '8px' }, backButton: { marginRight: '16px' }, loadingContainer: { textAlign: 'center', padding: '40px 20px', backgroundColor: '#f9f9f9', borderRadius: '8px', border: '1px solid #e0e0e0' }, loadingText: { fontSize: '16px', color: '#666' }, emptyState: { textAlign: 'center', padding: '40px 20px', backgroundColor: '#f9f9f9', borderRadius: '8px', border: '1px solid #e0e0e0' }, emptyStateText: { fontSize: '16px', color: '#666' }, button: { backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '4px', padding: '8px 16px', fontSize: '14px', fontWeight: 500, cursor: 'pointer', opacity: 1, transition: 'opacity 0.2s ease' } }; if (isLoading) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.loadingContainer }, React.createElement('p', { style: styles.loadingText }, 'Загрузка данных...') ) ); } if (selectedTable) { if (!tableData || tableData.length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.header }, React.createElement('button', { style: { ...styles.button, ...styles.backButton }, onClick: onBackToList }, '← Назад к списку таблиц'), React.createElement('h2', { style: styles.title }, selectedTable) ), React.createElement('div', { style: styles.emptyState }, React.createElement('p', { style: styles.emptyStateText }, 'В таблице нет данных') ) ); } const columns = Object.keys(tableData[0]); return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.header }, React.createElement('button', { style: { ...styles.button, ...styles.backButton }, onClick: onBackToList }, '← Назад к списку таблиц'), React.createElement('h2', { style: styles.title }, selectedTable) ), React.createElement('p', { style: styles.subtitle }, `Всего записей: ${tableData.length}`), React.createElement('div', { style: styles.tableContainer }, React.createElement('table', { style: styles.table }, React.createElement('thead', { style: styles.tableHeader }, React.createElement('tr', null, columns.map(column => React.createElement('th', { key: column, style: styles.tableHeaderCell }, column) ) ) ), React.createElement('tbody', null, tableData.map((row, rowIndex) => React.createElement('tr', { key: rowIndex, style: rowIndex % 2 === 0 ? styles.tableRow : styles.tableRowAlternate }, columns.map(column => React.createElement('td', { key: `${rowIndex}-${column}`, style: styles.tableCell }, formatCellValue(row[column])) ) ) ) ) ), hasMoreData && React.createElement('div', { style: { textAlign: 'center', padding: '16px' } }, React.createElement('button', { onClick: onLoadMore, style: styles.button, disabled: isLoading }, isLoading ? 'Загрузка...' : 'Загрузить ещё') ) ) ); } if (!tables || tables.length === 0) { return React.createElement('div', { style: styles.container }, React.createElement('h2', { style: styles.title }, 'Базы данных водоканала'), React.createElement('div', { style: styles.emptyState }, React.createElement('p', { style: styles.emptyStateText }, 'Таблицы не найдены') ) ); } return React.createElement('div', { style: styles.container }, React.createElement('h2', { style: styles.title }, 'Базы данных водоканала'), React.createElement('p', { style: styles.subtitle }, 'Выберите таблицу для просмотра данных'), React.createElement('div', { style: styles.tableContainer }, React.createElement('table', { style: styles.table }, React.createElement('thead', { style: styles.tableHeader }, React.createElement('tr', null, React.createElement('th', { style: styles.tableHeaderCell }, 'Название таблицы'), React.createElement('th', { style: styles.tableHeaderCell }, 'Количество записей'), React.createElement('th', { style: styles.tableHeaderCell }) ) ), React.createElement('tbody', null, tables.map((table, index) => React.createElement('tr', { key: table.table_name, style: index % 2 === 0 ? styles.tableRow : styles.tableRowAlternate }, React.createElement('td', { style: styles.tableCell }, table.table_name), React.createElement('td', { style: styles.tableCell }, table.row_count), React.createElement('td', { style: styles.tableCell }, React.createElement('div', { style: styles.buttonContainer }, React.createElement('button', { style: styles.button, onClick: () => onViewTable(table.table_name) }, 'Просмотреть') ) ) ) ) ) ) ) );
}
function formatCellValue(value) { if (value === null || value === undefined) { return '—'; } if (isValidISODate(value)) { return formatDate(value); } if (typeof value === 'boolean') { return value ? 'Да' : 'Нет'; } if (typeof value === 'object') { try { return JSON.stringify(value); } catch (e) { return String(value); } } return String(value);
}
function isValidISODate(dateString) { if (typeof dateString !== 'string') { return false; } const isoDatePattern = /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})?)?$/; if (!isoDatePattern.test(dateString)) { return false; } const date = new Date(dateString); return !isNaN(date.getTime());
}
function formatDate(dateString) { const date = new Date(dateString); return new Intl.DateTimeFormat('ru-RU', { day: '2-digit', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(date);
}
const exportedComponent = VodokanalDatabaseNew;
  
return exportedComponent;