import { n8nFetch } from '../../lib/n8n';
const generateSessionId = () => { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { const r = Math.random() * 16 | 0; const v = c === 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); });
};
const getUserEmail = () => { try { const authData = localStorage.getItem('app-auth-metadata'); if (!authData) return null; const parsedData = JSON.parse(authData); return parsedData?.email || null; } catch (error) { console.error('Ошибка при получении email пользователя:', error); return null; }
};
const renderResearchResult = (data) => { const htmlResult = data.html_result || (data.result && data.result.html_result); if (htmlResult) { const description = data.operations || (data.result && data.result.operations); const descriptionHTML = description ? `<div style="margin-bottom: 15px; font-weight: 500; color: #333;">${description}</div>` : ''; const styledTable = htmlResult.replace( /<table[^>]*>/g, `<table style=" width: 100%; border-collapse: collapse; font-size: 12px; background: #fff; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin: 20px 0; ">` ).replace( /<th>/g, `<th style=" padding: 4px 6px; text-align: left; font-weight: 600; color: #333; background-color: #f8f9fa; border-bottom: 2px solid #e0e0e0; font-size: 10px; ">` ).replace( /<td>/g, `<td style=" padding: 4px 6px; color: #555; border-bottom: 1px solid #f0f0f0; vertical-align: top; line-height: 1.3; ">` ).replace( /<tbody><tr>/g, '<tbody><tr style="background-color: #fff;">' ).replace( /<tr>/g, '<tr style="background-color: #fff; transition: background-color 0.2s;" onmouseover="this.style.backgroundColor=\'#f9f9f9\'" onmouseout="this.style.backgroundColor=\'#fff\'">' ); return descriptionHTML + styledTable; } return data.text || data.operations || data.result?.operations || 'Нет данных для отображения';
};
function VodokanalSearch() { const [currentQuery, setCurrentQuery] = React.useState(''); const [chatSessions, setChatSessions] = React.useState([]); const [activeSessionId, setActiveSessionId] = React.useState(null); const [messages, setMessages] = React.useState([]); const [loading, setLoading] = React.useState(false); const [error, setError] = React.useState(null); const popularQueries = [ 'Покажи лидеров по потреблению по региону Екатеринбург за март 2025', 'Сформируй маршрутный лист по участкам где поверка не осуществлялась более полугода', 'Найди участки в Башкортостане, где передача показаний не была стабильной за последние 3 месяца', 'Покажи 10 подозрительных договоров где был скачок потребления в 2 раза', 'Найди участки где данные передавались позже 15 числа месяца' ]; React.useEffect(() => { loadChatSessions(); }, []); const loadChatSessions = async () => { try { const userEmail = getUserEmail(); if (!userEmail) { console.error('Не удалось получить email пользователя для загрузки сессий'); return; } const response = await n8nFetch('getMySessions', { method: 'POST', body: JSON.stringify({ email: userEmail }) }); const sessionsData = await response.json(); const formattedSessions = Array.isArray(sessionsData) ? sessionsData.map(session => ({ id: session.session_id || session.id, title: session.title || 'Чат без названия', lastMessage: session.last_message || session.lastMessage || '', createdAt: session.created_at || session.createdAt || new Date().toISOString(), hidden: false })) : []; setChatSessions(formattedSessions); } catch (err) { console.error('Ошибка при загрузке сессий:', err); setChatSessions([]); } }; const hideSession = async (sessionId) => { if (!window.confirm('Удалить эту сессию?')) { return; } try { await n8nFetch(`hideMySession?id=${sessionId}`, { method: 'GET' }); setChatSessions(prev => prev.map(session => session.id === sessionId ? { ...session, hidden: true } : session )); if (activeSessionId === sessionId) { setActiveSessionId(null); setMessages([]); } } catch (err) { console.error('Ошибка при скрытии сессии:', err); alert('Ошибка при удалении сессии'); } }; const createNewSession = () => { const newSessionId = generateSessionId(); const newSession = { id: newSessionId, title: 'Новый чат', lastMessage: '', createdAt: new Date().toISOString() }; setChatSessions(prev => [newSession, ...prev]); setActiveSessionId(newSessionId); setMessages([]); setCurrentQuery(''); }; const loadSessionMessages = async (sessionId) => { try { const response = await n8nFetch(`getMySession?session_id=${sessionId}`, { method: 'GET' }); const sessionData = await response.json(); const filteredMessages = Array.isArray(sessionData) ? sessionData.filter(item => { if (!item.message) return false; const messageType = item.message.type; const content = item.message.content; if (messageType === 'human') { return !content.startsWith('[{') && !content.startsWith('[{}]') && !content.startsWith('This is an SQL query response'); } if (messageType === 'ai') { try { const parsedContent = JSON.parse(content); const outputType = parsedContent.output?.type; return outputType === 'research_result' || outputType === 'message'; } catch (e) { return true; } } return false; }).map((item, index) => { const messageType = item.message.type === 'human' ? 'user' : 'assistant'; let content = item.message.content; let contentType = 'text'; if (messageType === 'assistant') { try { const parsedContent = JSON.parse(content); const outputType = parsedContent.output?.type; if (outputType === 'research_result') { content = renderResearchResult(parsedContent.output); contentType = 'html'; } else if (outputType === 'message') { content = parsedContent.output.text || 'Пустое сообщение'; contentType = 'text'; } } catch (e) { contentType = 'text'; } } return { id: item.id?.toString() || index.toString(), type: messageType, content: content, contentType: contentType, timestamp: new Date().toISOString() }; }) : []; setMessages(filteredMessages); } catch (err) { console.error('Ошибка при загрузке сообщений сессии:', err); setMessages([]); } }; const selectSession = (sessionId) => { setActiveSessionId(sessionId); loadSessionMessages(sessionId); }; const handleSubmitQuery = async (query = currentQuery) => { if (!query.trim()) return; setLoading(true); setError(null); try { let sessionId = activeSessionId; if (!sessionId) { sessionId = generateSessionId(); const newSession = { id: sessionId, title: 'Новый чат', lastMessage: '', createdAt: new Date().toISOString() }; setChatSessions(prev => [newSession, ...prev]); setActiveSessionId(sessionId); } const userEmail = getUserEmail(); if (!userEmail) { throw new Error('Не удалось получить email пользователя'); } const userMessage = { id: Date.now().toString(), type: 'user', content: query, timestamp: new Date().toISOString() }; setMessages(prev => [...prev, userMessage]); setCurrentQuery(''); const requestData = { input: query, session_id: sessionId, email: userEmail }; const response = await n8nFetch('chatMessage', { method: 'POST', body: JSON.stringify(requestData) }); const responseData = await response.json(); let content = 'Получен пустой ответ от сервера'; let contentType = 'text'; let chatTitle = null; if (responseData.title) { chatTitle = responseData.title; } if (responseData.output) { try { const parsedOutput = JSON.parse(responseData.output); if (parsedOutput.type === 'research_result') { content = renderResearchResult(parsedOutput); contentType = 'html'; } else if (parsedOutput.type === 'message') { content = parsedOutput.text || 'Пустое сообщение'; contentType = 'text'; } else { content = responseData.output; contentType = 'text'; } } catch (e) { content = responseData.output; contentType = 'text'; } } if (chatTitle && sessionId) { setChatSessions(prev => prev.map(session => session.id === sessionId ? { ...session, title: chatTitle } : session )); } const botMessage = { id: (Date.now() + 1).toString(), type: 'assistant', content: content, contentType: contentType, timestamp: new Date().toISOString() }; setMessages(prev => [...prev, botMessage]); } catch (err) { console.error('Ошибка при отправке запроса:', err); setError(err.message || 'Произошла ошибка при отправке запроса'); const errorMessage = { id: (Date.now() + 2).toString(), type: 'assistant', content: `Ошибка: ${err.message || 'Произошла ошибка при отправке запроса'}`, timestamp: new Date().toISOString() }; setMessages(prev => [...prev, errorMessage]); } finally { setLoading(false); } }; const handlePopularQuery = (query) => { setCurrentQuery(query); }; return VodokanalSearchContent({ currentQuery, setCurrentQuery, chatSessions, activeSessionId, messages, loading, error, popularQueries, onSubmitQuery: handleSubmitQuery, onPopularQuery: handlePopularQuery, onCreateNewSession: createNewSession, onSelectSession: selectSession, onHideSession: hideSession });
}
function VodokanalSearchContent({ currentQuery, setCurrentQuery, chatSessions, activeSessionId, messages, loading, error, popularQueries, onSubmitQuery, onPopularQuery, onCreateNewSession, onSelectSession, onHideSession
}) { const [hoveredSession, setHoveredSession] = React.useState(null); const textInputRef = React.useRef(null); const messagesContainerRef = React.useRef(null); const scrollToBottom = () => { if (messagesContainerRef.current) { const container = messagesContainerRef.current; container.scrollTop = container.scrollHeight; } }; React.useEffect(() => { if (textInputRef.current) { textInputRef.current.focus(); } }, [activeSessionId, currentQuery]); React.useEffect(() => { if (messages.length > 0) { setTimeout(scrollToBottom, 100); } }, [messages]); React.useEffect(() => { if (activeSessionId && messages.length > 0) { setTimeout(scrollToBottom, 200); } }, [activeSessionId]); const styles = { container: { display: 'flex', height: 'calc(100vh - 49px)', backgroundColor: '#f5f5f5' }, sidebar: { width: '280px', backgroundColor: '#fff', borderRight: '1px solid #e0e0e0', display: 'flex', flexDirection: 'column' }, sidebarHeader: { padding: '16px', borderBottom: '1px solid #e0e0e0' }, newChatButton: { width: '100%', padding: '12px 16px', backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '6px', fontSize: '14px', fontWeight: '500', cursor: 'pointer', transition: 'background-color 0.2s' }, sessionsList: { flex: 1, overflowY: 'auto', padding: '8px' }, sessionItem: { position: 'relative', padding: '8px 12px', margin: '2px 0', borderRadius: '6px', cursor: 'pointer', transition: 'background-color 0.2s', backgroundColor: 'transparent' }, sessionItemActive: { backgroundColor: '#f0f8ff' }, sessionItemHover: { backgroundColor: '#f9f9f9' }, sessionTitle: { fontSize: '13px', fontWeight: '500', color: '#333', marginBottom: '2px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', paddingRight: '24px' }, sessionPreview: { fontSize: '11px', color: '#666', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', paddingRight: '24px' }, deleteButton: { position: 'absolute', right: '8px', top: '50%', transform: 'translateY(-50%)', width: '16px', height: '16px', backgroundColor: 'transparent', border: 'none', cursor: 'pointer', opacity: '0', transition: 'opacity 0.2s', fontSize: '12px', color: '#999', display: 'flex', alignItems: 'center', justifyContent: 'center' }, sessionItemWithHover: { '&:hover .delete-button': { opacity: '1' } }, mainContent: { flex: 1, display: 'flex', flexDirection: 'column', backgroundColor: '#fff' }, chatArea: { flex: 1, padding: '20px', overflowY: 'auto', display: 'flex', flexDirection: 'column' }, welcomeScreen: { flex: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', textAlign: 'center', maxWidth: '600px', margin: '0 auto' }, welcomeTitle: { fontSize: '24px', fontWeight: '600', color: '#333', marginBottom: '12px' }, welcomeSubtitle: { fontSize: '16px', color: '#666', marginBottom: '32px', lineHeight: '1.5' }, popularQueriesGrid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '12px', width: '100%', marginBottom: '32px' }, popularQueryButton: { padding: '16px', backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0', borderRadius: '8px', cursor: 'pointer', textAlign: 'left', fontSize: '14px', color: '#333', transition: 'all 0.2s', lineHeight: '1.4' }, messagesContainer: { flex: 1, padding: '20px 0' }, message: { marginBottom: '16px' }, messageUser: { display: 'flex', justifyContent: 'flex-end' }, messageAssistant: { display: 'flex', justifyContent: 'flex-start' }, messageBubble: { maxWidth: '70%', padding: '12px 16px', borderRadius: '12px', fontSize: '14px', lineHeight: '1.4' }, messageBubbleUser: { backgroundColor: '#0066cc', color: '#fff' }, messageBubbleAssistant: { backgroundColor: '#f1f3f4', color: '#333' }, messageBubbleAssistantHTML: { backgroundColor: '#f1f3f4', color: '#333', maxWidth: '85%', padding: '16px', overflow: 'auto' }, inputArea: { padding: '20px', borderTop: '1px solid #e0e0e0', backgroundColor: '#fff' }, inputContainer: { display: 'flex', gap: '12px', maxWidth: '800px', margin: '0 auto' }, textInput: { flex: 1, padding: '12px 16px', border: '1px solid #e0e0e0', borderRadius: '8px', fontSize: '14px', resize: 'none', outline: 'none', fontFamily: 'inherit' }, sendButton: { padding: '12px 24px', backgroundColor: '#0066cc', color: '#fff', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '500', cursor: 'pointer', transition: 'background-color 0.2s', alignSelf: 'flex-end' }, sendButtonDisabled: { backgroundColor: '#ccc', cursor: 'not-allowed' }, loadingIndicator: { display: 'flex', justifyContent: 'flex-start', marginBottom: '16px' }, loadingBubble: { padding: '12px 16px', backgroundColor: '#f1f3f4', borderRadius: '12px', color: '#666', fontSize: '14px' } }; const formatSessionTime = (timestamp) => { const date = new Date(timestamp); const now = new Date(); const diff = now - date; if (diff < 24 * 60 * 60 * 1000) { return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }); } else { return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }); } }; return React.createElement('div', { style: styles.container }, React.createElement('div', { style: styles.sidebar }, React.createElement('div', { style: styles.sidebarHeader }, React.createElement('button', { style: styles.newChatButton, onClick: onCreateNewSession }, '+ Новый запрос') ), React.createElement('div', { style: styles.sessionsList }, chatSessions.filter(session => !session.hidden).map(session => React.createElement('div', { key: session.id, style: { ...styles.sessionItem, ...(session.id === activeSessionId ? styles.sessionItemActive : {}) }, onMouseEnter: () => setHoveredSession(session.id), onMouseLeave: () => setHoveredSession(null), onClick: (e) => { if (e.target.closest('.delete-button')) return; onSelectSession(session.id); } }, React.createElement('div', { style: styles.sessionTitle }, session.title), React.createElement('button', { className: 'delete-button', style: { ...styles.deleteButton, opacity: hoveredSession === session.id ? '1' : '0' }, onClick: (e) => { e.stopPropagation(); onHideSession(session.id); }, title: 'Удалить сессию' }, '🗑️') ) ) ) ), React.createElement('div', { style: styles.mainContent }, React.createElement('div', { style: styles.chatArea }, (!activeSessionId || messages.length === 0) ? React.createElement('div', { style: styles.welcomeScreen }, React.createElement('h1', { style: styles.welcomeTitle }, 'Поиск по данным Россети'), React.createElement('p', { style: styles.welcomeSubtitle }, 'Задайте вопрос о работе Россети и получите ответ на основе актуальных данных' ), React.createElement('div', { style: styles.popularQueriesGrid }, popularQueries.map((query, index) => React.createElement('button', { key: index, style: styles.popularQueryButton, onClick: () => onPopularQuery(query) }, query) ) ) ) : React.createElement('div', { style: styles.messagesContainer, ref: messagesContainerRef }, messages.map(message => React.createElement('div', { key: message.id, style: { ...styles.message, ...(message.type === 'user' ? styles.messageUser : styles.messageAssistant) } }, React.createElement('div', { style: { ...styles.messageBubble, ...(message.type === 'user' ? styles.messageBubbleUser : message.contentType === 'html' ? styles.messageBubbleAssistantHTML : styles.messageBubbleAssistant) }, ...(message.contentType === 'html' ? { dangerouslySetInnerHTML: { __html: message.content } } : {}) }, message.contentType === 'html' ? null : message.content) ) ), loading && React.createElement('div', { style: styles.loadingIndicator }, React.createElement('div', { style: styles.loadingBubble }, 'Обработка запроса...') ) ) ), React.createElement('div', { style: styles.inputArea }, React.createElement('div', { style: styles.inputContainer }, React.createElement('textarea', { ref: textInputRef, style: styles.textInput, value: currentQuery, onChange: (e) => setCurrentQuery(e.target.value), placeholder: 'Введите ваш вопрос...', rows: 1, onKeyDown: (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); onSubmitQuery(); } } }), React.createElement('button', { style: { ...styles.sendButton, ...((!currentQuery.trim() || loading) ? styles.sendButtonDisabled : {}) }, onClick: () => onSubmitQuery(), disabled: !currentQuery.trim() || loading }, loading ? 'Отправка...' : 'Отправить') ) ) ) );
}
const exportedComponent = VodokanalSearch;
  
return exportedComponent;